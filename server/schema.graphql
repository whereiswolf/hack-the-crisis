### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Auth {
  token: String!
}

type Business {
  address: String!
  amount: Float!
  category: Category
  city: String!
  description: String!
  history: String
  id: Int!
  imageUrl: String!
  name: String!
  ratings(after: RatingWhereUniqueInput, before: RatingWhereUniqueInput, first: Int, last: Int, skip: Int): [Rating!]!
  siteUrl: String
  type: String!
  vouchers: [Voucher!]!
}

input BusinessCreateInput {
  address: String!
  amount: Float!
  category: CategoryCreateOneWithoutBusinessesInput
  city: String!
  description: String!
  history: String
  imageUrl: String!
  name: String!
  ratings: RatingCreateManyWithoutBusinessesInput
  siteUrl: String
  type: String!
  vouchers: VoucherCreateManyWithoutBusinessInput
}

input BusinessCreateManyWithoutCategoryInput {
  connect: [BusinessWhereUniqueInput!]
  create: [BusinessCreateWithoutCategoryInput!]
}

input BusinessCreateOneWithoutVouchersInput {
  connect: BusinessWhereUniqueInput
  create: BusinessCreateWithoutVouchersInput
}

input BusinessCreateWithoutCategoryInput {
  address: String!
  amount: Float!
  city: String!
  description: String!
  history: String
  imageUrl: String!
  name: String!
  ratings: RatingCreateManyWithoutBusinessesInput
  siteUrl: String
  type: String!
  vouchers: VoucherCreateManyWithoutBusinessInput
}

input BusinessCreateWithoutVouchersInput {
  address: String!
  amount: Float!
  category: CategoryCreateOneWithoutBusinessesInput
  city: String!
  description: String!
  history: String
  imageUrl: String!
  name: String!
  ratings: RatingCreateManyWithoutBusinessesInput
  siteUrl: String
  type: String!
}

input BusinessFilter {
  every: BusinessWhereInput
  none: BusinessWhereInput
  some: BusinessWhereInput
}

input BusinessScalarWhereInput {
  address: StringFilter
  amount: FloatFilter
  AND: [BusinessScalarWhereInput!]
  categoryId: NullableIntFilter
  city: StringFilter
  description: StringFilter
  history: NullableStringFilter
  id: IntFilter
  imageUrl: StringFilter
  name: StringFilter
  NOT: [BusinessScalarWhereInput!]
  OR: [BusinessScalarWhereInput!]
  ratings: RatingFilter
  siteUrl: NullableStringFilter
  type: StringFilter
  vouchers: VoucherFilter
}

input BusinessUpdateInput {
  address: String
  amount: Float
  category: CategoryUpdateOneWithoutBusinessesInput
  city: String
  description: String
  history: String
  id: Int
  imageUrl: String
  name: String
  ratings: RatingUpdateManyWithoutBusinessesInput
  siteUrl: String
  type: String
  vouchers: VoucherUpdateManyWithoutBusinessInput
}

input BusinessUpdateManyDataInput {
  address: String
  amount: Float
  city: String
  description: String
  history: String
  id: Int
  imageUrl: String
  name: String
  siteUrl: String
  type: String
}

input BusinessUpdateManyWithoutCategoryInput {
  connect: [BusinessWhereUniqueInput!]
  create: [BusinessCreateWithoutCategoryInput!]
  delete: [BusinessWhereUniqueInput!]
  deleteMany: [BusinessScalarWhereInput!]
  disconnect: [BusinessWhereUniqueInput!]
  set: [BusinessWhereUniqueInput!]
  update: [BusinessUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [BusinessUpdateManyWithWhereNestedInput!]
  upsert: [BusinessUpsertWithWhereUniqueWithoutCategoryInput!]
}

input BusinessUpdateManyWithWhereNestedInput {
  data: BusinessUpdateManyDataInput!
  where: BusinessScalarWhereInput!
}

input BusinessUpdateOneWithoutVouchersInput {
  connect: BusinessWhereUniqueInput
  create: BusinessCreateWithoutVouchersInput
  delete: Boolean
  disconnect: Boolean
  update: BusinessUpdateWithoutVouchersDataInput
  upsert: BusinessUpsertWithoutVouchersInput
}

input BusinessUpdateWithoutCategoryDataInput {
  address: String
  amount: Float
  city: String
  description: String
  history: String
  id: Int
  imageUrl: String
  name: String
  ratings: RatingUpdateManyWithoutBusinessesInput
  siteUrl: String
  type: String
  vouchers: VoucherUpdateManyWithoutBusinessInput
}

input BusinessUpdateWithoutVouchersDataInput {
  address: String
  amount: Float
  category: CategoryUpdateOneWithoutBusinessesInput
  city: String
  description: String
  history: String
  id: Int
  imageUrl: String
  name: String
  ratings: RatingUpdateManyWithoutBusinessesInput
  siteUrl: String
  type: String
}

input BusinessUpdateWithWhereUniqueWithoutCategoryInput {
  data: BusinessUpdateWithoutCategoryDataInput!
  where: BusinessWhereUniqueInput!
}

input BusinessUpsertWithoutVouchersInput {
  create: BusinessCreateWithoutVouchersInput!
  update: BusinessUpdateWithoutVouchersDataInput!
}

input BusinessUpsertWithWhereUniqueWithoutCategoryInput {
  create: BusinessCreateWithoutCategoryInput!
  update: BusinessUpdateWithoutCategoryDataInput!
  where: BusinessWhereUniqueInput!
}

input BusinessWhereInput {
  address: StringFilter
  amount: FloatFilter
  AND: [BusinessWhereInput!]
  category: CategoryWhereInput
  categoryId: NullableIntFilter
  city: StringFilter
  description: StringFilter
  history: NullableStringFilter
  id: IntFilter
  imageUrl: StringFilter
  name: StringFilter
  NOT: [BusinessWhereInput!]
  OR: [BusinessWhereInput!]
  ratings: RatingFilter
  siteUrl: NullableStringFilter
  type: StringFilter
  vouchers: VoucherFilter
}

input BusinessWhereUniqueInput {
  id: Int
}

type Category {
  businesses(after: BusinessWhereUniqueInput, before: BusinessWhereUniqueInput, first: Int, last: Int, skip: Int): [Business!]!
  id: Int!
  name: String!
}

input CategoryCreateInput {
  businesses: BusinessCreateManyWithoutCategoryInput
  name: String!
}

input CategoryCreateOneWithoutBusinessesInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutBusinessesInput
}

input CategoryCreateWithoutBusinessesInput {
  name: String!
}

input CategoryUpdateInput {
  businesses: BusinessUpdateManyWithoutCategoryInput
  id: Int
  name: String
}

input CategoryUpdateOneWithoutBusinessesInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutBusinessesInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateWithoutBusinessesDataInput
  upsert: CategoryUpsertWithoutBusinessesInput
}

input CategoryUpdateWithoutBusinessesDataInput {
  id: Int
  name: String
}

input CategoryUpsertWithoutBusinessesInput {
  create: CategoryCreateWithoutBusinessesInput!
  update: CategoryUpdateWithoutBusinessesDataInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  businesses: BusinessFilter
  id: IntFilter
  name: StringFilter
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: Int
}

type File {
  encoding: String!
  filename: String!
  id: ID!
  mimetype: String!
  path: String!
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneBusiness(data: BusinessCreateInput!): Business!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneOrder(data: OrderCreateInput!): Order!
  createOneTag(data: TagCreateInput!): Tag!
  createOneUser(accountType: Int, email: String, password: String): User!
  createOneVoucher(data: VoucherCreateInput!): Voucher!
  deleteOneBusiness(where: BusinessWhereUniqueInput!): Business
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneOrder(where: OrderWhereUniqueInput!): Order
  deleteOneTag(where: TagWhereUniqueInput!): Tag
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneVoucher(where: VoucherWhereUniqueInput!): Voucher
  updateOneBusiness(data: BusinessUpdateInput!, where: BusinessWhereUniqueInput!): Business
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateOneVoucher(data: VoucherUpdateInput!, where: VoucherWhereUniqueInput!): Voucher
  uploadFile(file: Upload!): File!
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Order {
  count: Int!
  email: String!
  id: Int!
  name: String!
  user: User
  voucher: Voucher!
}

input OrderCreateInput {
  count: Int
  email: String!
  name: String!
  user: UserCreateOneWithoutOrdersInput
  voucher: VoucherCreateOneWithoutOrdersInput!
}

input OrderCreateManyWithoutVoucherInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutVoucherInput!]
}

input OrderCreateWithoutVoucherInput {
  count: Int
  email: String!
  name: String!
  user: UserCreateOneWithoutOrdersInput
}

input OrderFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  count: IntFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  userId: NullableIntFilter
  voucherId: IntFilter
}

input OrderUpdateInput {
  count: Int
  email: String
  id: Int
  name: String
  user: UserUpdateOneWithoutOrdersInput
  voucher: VoucherUpdateOneRequiredWithoutOrdersInput
}

input OrderUpdateManyDataInput {
  count: Int
  email: String
  id: Int
  name: String
}

input OrderUpdateManyWithoutVoucherInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutVoucherInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutVoucherInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutVoucherInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  data: OrderUpdateManyDataInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateWithoutVoucherDataInput {
  count: Int
  email: String
  id: Int
  name: String
  user: UserUpdateOneWithoutOrdersInput
}

input OrderUpdateWithWhereUniqueWithoutVoucherInput {
  data: OrderUpdateWithoutVoucherDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutVoucherInput {
  create: OrderCreateWithoutVoucherInput!
  update: OrderUpdateWithoutVoucherDataInput!
  where: OrderWhereUniqueInput!
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  count: IntFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  user: UserWhereInput
  userId: NullableIntFilter
  voucher: VoucherWhereInput
  voucherId: IntFilter
}

input OrderWhereUniqueInput {
  id: Int
}

type Query {
  business(where: BusinessWhereUniqueInput!): Business
  businesses(categoryId: Int, name: String): [Business!]!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int, skip: Int): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  login(email: String, password: String): Auth!
  order(where: OrderWhereUniqueInput!): Order
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int, skip: Int): [Order!]!
  recommended: Voucher!
  tag(where: TagWhereUniqueInput!): Tag
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, skip: Int): [Tag!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
  voucher(where: VoucherWhereUniqueInput!): Voucher
  vouchers(businessId: Int, businessType: String, category: Int, city: String, distance: Int, name: String): [Voucher!]!
}

type Rating {
  businesses(after: BusinessWhereUniqueInput, before: BusinessWhereUniqueInput, first: Int, last: Int, skip: Int): [Business!]!
  id: Int!
  rate: Int!
}

input RatingCreateManyWithoutBusinessesInput {
  connect: [RatingWhereUniqueInput!]
  create: [RatingCreateWithoutBusinessesInput!]
}

input RatingCreateWithoutBusinessesInput {
  rate: Int!
}

input RatingFilter {
  every: RatingWhereInput
  none: RatingWhereInput
  some: RatingWhereInput
}

input RatingScalarWhereInput {
  AND: [RatingScalarWhereInput!]
  businesses: BusinessFilter
  id: IntFilter
  NOT: [RatingScalarWhereInput!]
  OR: [RatingScalarWhereInput!]
  rate: IntFilter
}

input RatingUpdateManyDataInput {
  id: Int
  rate: Int
}

input RatingUpdateManyWithoutBusinessesInput {
  connect: [RatingWhereUniqueInput!]
  create: [RatingCreateWithoutBusinessesInput!]
  delete: [RatingWhereUniqueInput!]
  deleteMany: [RatingScalarWhereInput!]
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutBusinessesInput!]
  updateMany: [RatingUpdateManyWithWhereNestedInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutBusinessesInput!]
}

input RatingUpdateManyWithWhereNestedInput {
  data: RatingUpdateManyDataInput!
  where: RatingScalarWhereInput!
}

input RatingUpdateWithoutBusinessesDataInput {
  id: Int
  rate: Int
}

input RatingUpdateWithWhereUniqueWithoutBusinessesInput {
  data: RatingUpdateWithoutBusinessesDataInput!
  where: RatingWhereUniqueInput!
}

input RatingUpsertWithWhereUniqueWithoutBusinessesInput {
  create: RatingCreateWithoutBusinessesInput!
  update: RatingUpdateWithoutBusinessesDataInput!
  where: RatingWhereUniqueInput!
}

input RatingWhereInput {
  AND: [RatingWhereInput!]
  businesses: BusinessFilter
  id: IntFilter
  NOT: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  rate: IntFilter
}

input RatingWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Tag {
  id: Int!
  name: String!
  vouchers(after: VoucherWhereUniqueInput, before: VoucherWhereUniqueInput, first: Int, last: Int, skip: Int): [Voucher!]!
}

input TagCreateInput {
  name: String!
  vouchers: VoucherCreateManyWithoutTagsInput
}

input TagCreateManyWithoutVouchersInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutVouchersInput!]
}

input TagCreateWithoutVouchersInput {
  name: String!
}

input TagFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  vouchers: VoucherFilter
}

input TagUpdateInput {
  id: Int
  name: String
  vouchers: VoucherUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  id: Int
  name: String
}

input TagUpdateManyWithoutVouchersInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutVouchersInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutVouchersInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutVouchersInput!]
}

input TagUpdateManyWithWhereNestedInput {
  data: TagUpdateManyDataInput!
  where: TagScalarWhereInput!
}

input TagUpdateWithoutVouchersDataInput {
  id: Int
  name: String
}

input TagUpdateWithWhereUniqueWithoutVouchersInput {
  data: TagUpdateWithoutVouchersDataInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutVouchersInput {
  create: TagCreateWithoutVouchersInput!
  update: TagUpdateWithoutVouchersDataInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  vouchers: VoucherFilter
}

input TagWhereUniqueInput {
  id: Int
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  accountType: Int!
  email: String!
  id: Int!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int, skip: Int): [Order!]!
  password: String!
}

input UserCreateOneWithoutOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrdersInput
}

input UserCreateWithoutOrdersInput {
  accountType: Int
  email: String!
  password: String!
}

input UserUpdateOneWithoutOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateWithoutOrdersDataInput {
  accountType: Int
  email: String
  id: Int
  password: String
}

input UserUpsertWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput!
  update: UserUpdateWithoutOrdersDataInput!
}

input UserWhereInput {
  accountType: IntFilter
  AND: [UserWhereInput!]
  email: StringFilter
  id: IntFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  orders: OrderFilter
  password: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type Voucher {
  business: Business
  description: String!
  expirationDate: String
  id: Int!
  imageUrl: String!
  name: String!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int, skip: Int): [Order!]!
  price: Float!
  promotion: Float
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, skip: Int): [Tag!]!
}

input VoucherCreateInput {
  business: BusinessCreateOneWithoutVouchersInput
  description: String!
  expirationDate: String
  imageUrl: String!
  name: String!
  orders: OrderCreateManyWithoutVoucherInput
  price: Float!
  promotion: Float
  tags: TagCreateManyWithoutVouchersInput
}

input VoucherCreateManyWithoutBusinessInput {
  connect: [VoucherWhereUniqueInput!]
  create: [VoucherCreateWithoutBusinessInput!]
}

input VoucherCreateManyWithoutTagsInput {
  connect: [VoucherWhereUniqueInput!]
  create: [VoucherCreateWithoutTagsInput!]
}

input VoucherCreateOneWithoutOrdersInput {
  connect: VoucherWhereUniqueInput
  create: VoucherCreateWithoutOrdersInput
}

input VoucherCreateWithoutBusinessInput {
  description: String!
  expirationDate: String
  imageUrl: String!
  name: String!
  orders: OrderCreateManyWithoutVoucherInput
  price: Float!
  promotion: Float
  tags: TagCreateManyWithoutVouchersInput
}

input VoucherCreateWithoutOrdersInput {
  business: BusinessCreateOneWithoutVouchersInput
  description: String!
  expirationDate: String
  imageUrl: String!
  name: String!
  price: Float!
  promotion: Float
  tags: TagCreateManyWithoutVouchersInput
}

input VoucherCreateWithoutTagsInput {
  business: BusinessCreateOneWithoutVouchersInput
  description: String!
  expirationDate: String
  imageUrl: String!
  name: String!
  orders: OrderCreateManyWithoutVoucherInput
  price: Float!
  promotion: Float
}

input VoucherFilter {
  every: VoucherWhereInput
  none: VoucherWhereInput
  some: VoucherWhereInput
}

input VoucherScalarWhereInput {
  AND: [VoucherScalarWhereInput!]
  businessId: NullableIntFilter
  description: StringFilter
  expirationDate: NullableStringFilter
  id: IntFilter
  imageUrl: StringFilter
  name: StringFilter
  NOT: [VoucherScalarWhereInput!]
  OR: [VoucherScalarWhereInput!]
  orders: OrderFilter
  price: FloatFilter
  promotion: NullableFloatFilter
  tags: TagFilter
}

input VoucherUpdateInput {
  business: BusinessUpdateOneWithoutVouchersInput
  description: String
  expirationDate: String
  id: Int
  imageUrl: String
  name: String
  orders: OrderUpdateManyWithoutVoucherInput
  price: Float
  promotion: Float
  tags: TagUpdateManyWithoutVouchersInput
}

input VoucherUpdateManyDataInput {
  description: String
  expirationDate: String
  id: Int
  imageUrl: String
  name: String
  price: Float
  promotion: Float
}

input VoucherUpdateManyWithoutBusinessInput {
  connect: [VoucherWhereUniqueInput!]
  create: [VoucherCreateWithoutBusinessInput!]
  delete: [VoucherWhereUniqueInput!]
  deleteMany: [VoucherScalarWhereInput!]
  disconnect: [VoucherWhereUniqueInput!]
  set: [VoucherWhereUniqueInput!]
  update: [VoucherUpdateWithWhereUniqueWithoutBusinessInput!]
  updateMany: [VoucherUpdateManyWithWhereNestedInput!]
  upsert: [VoucherUpsertWithWhereUniqueWithoutBusinessInput!]
}

input VoucherUpdateManyWithoutTagsInput {
  connect: [VoucherWhereUniqueInput!]
  create: [VoucherCreateWithoutTagsInput!]
  delete: [VoucherWhereUniqueInput!]
  deleteMany: [VoucherScalarWhereInput!]
  disconnect: [VoucherWhereUniqueInput!]
  set: [VoucherWhereUniqueInput!]
  update: [VoucherUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [VoucherUpdateManyWithWhereNestedInput!]
  upsert: [VoucherUpsertWithWhereUniqueWithoutTagsInput!]
}

input VoucherUpdateManyWithWhereNestedInput {
  data: VoucherUpdateManyDataInput!
  where: VoucherScalarWhereInput!
}

input VoucherUpdateOneRequiredWithoutOrdersInput {
  connect: VoucherWhereUniqueInput
  create: VoucherCreateWithoutOrdersInput
  update: VoucherUpdateWithoutOrdersDataInput
  upsert: VoucherUpsertWithoutOrdersInput
}

input VoucherUpdateWithoutBusinessDataInput {
  description: String
  expirationDate: String
  id: Int
  imageUrl: String
  name: String
  orders: OrderUpdateManyWithoutVoucherInput
  price: Float
  promotion: Float
  tags: TagUpdateManyWithoutVouchersInput
}

input VoucherUpdateWithoutOrdersDataInput {
  business: BusinessUpdateOneWithoutVouchersInput
  description: String
  expirationDate: String
  id: Int
  imageUrl: String
  name: String
  price: Float
  promotion: Float
  tags: TagUpdateManyWithoutVouchersInput
}

input VoucherUpdateWithoutTagsDataInput {
  business: BusinessUpdateOneWithoutVouchersInput
  description: String
  expirationDate: String
  id: Int
  imageUrl: String
  name: String
  orders: OrderUpdateManyWithoutVoucherInput
  price: Float
  promotion: Float
}

input VoucherUpdateWithWhereUniqueWithoutBusinessInput {
  data: VoucherUpdateWithoutBusinessDataInput!
  where: VoucherWhereUniqueInput!
}

input VoucherUpdateWithWhereUniqueWithoutTagsInput {
  data: VoucherUpdateWithoutTagsDataInput!
  where: VoucherWhereUniqueInput!
}

input VoucherUpsertWithoutOrdersInput {
  create: VoucherCreateWithoutOrdersInput!
  update: VoucherUpdateWithoutOrdersDataInput!
}

input VoucherUpsertWithWhereUniqueWithoutBusinessInput {
  create: VoucherCreateWithoutBusinessInput!
  update: VoucherUpdateWithoutBusinessDataInput!
  where: VoucherWhereUniqueInput!
}

input VoucherUpsertWithWhereUniqueWithoutTagsInput {
  create: VoucherCreateWithoutTagsInput!
  update: VoucherUpdateWithoutTagsDataInput!
  where: VoucherWhereUniqueInput!
}

input VoucherWhereInput {
  AND: [VoucherWhereInput!]
  business: BusinessWhereInput
  businessId: NullableIntFilter
  description: StringFilter
  expirationDate: NullableStringFilter
  id: IntFilter
  imageUrl: StringFilter
  name: StringFilter
  NOT: [VoucherWhereInput!]
  OR: [VoucherWhereInput!]
  orders: OrderFilter
  price: FloatFilter
  promotion: NullableFloatFilter
  tags: TagFilter
}

input VoucherWhereUniqueInput {
  id: Int
}
