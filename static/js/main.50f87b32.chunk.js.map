{"version":3,"sources":["modules/example/strings.ts","utils/index.ts","modules/example/i18n/index.ts","modules/example/i18n/en.ts","config/theme.ts","config/env.ts","config/client.ts","components/NotFoundMessage/NotFoundMessage.tsx","strings.ts","components/Layout/Layout.tsx","components/App/App.tsx","components/App/App.utils.ts","components/Loader/Loader.tsx","modules/index.ts","modules/example/index.ts","modules/example/routes.ts","i18n/index.ts","i18n/en.ts","serviceWorker.ts","index.tsx"],"names":["MODULE_NAME","getTranslationKeys","DATA_LOADING","DATA_ERROR","moduleName","strings","Object","entries","reduce","obj","key","value","addBasePath","basePath","routes","map","route","path","resources","en","translation","lightTheme","createMuiTheme","darkTheme","API_URL","process","REACT_APP_API_URL","client","ApolloClient","uri","config","NotFoundMessage","role","aria-label","LOGIN","Layout","items","children","t","useTranslation","AppBar","Toolbar","Grid","container","justify","item","Typography","label","Button","to","component","Link","App","modules","useState","theme","moduleConfig","getRoutes","navItems","getNavItems","ThemeProvider","Loader","error","i18n","exact","Loadable","loader","loading","name","globalResources","translations","merge","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.50f87b32.chunk.js","sourcesContent":["import { getTranslationKeys } from 'utils'\n\nexport const MODULE_NAME = 'example'\n\nexport const STRINGS = {\n  MODULE_NAME: 'MODULE_NAME',\n  DATA_LOADING: 'DATA_LOADING',\n  DATA_ERROR: 'DATA_ERROR',\n}\n\nexport default getTranslationKeys(MODULE_NAME, STRINGS)\n","import { RouteProps } from 'react-router'\n\nexport const getTranslationKeys = <T>(moduleName: string, strings: T) =>\n  Object.entries(strings).reduce<T>(\n    (obj, [key, value]) => ({ ...obj, [key]: `${moduleName}_${value}` }),\n    {} as T\n  )\n\nexport const addBasePath = (basePath: string, routes: RouteProps[]) =>\n  routes.map((route) => ({\n    ...route,\n    path: `${basePath}${route.path}`,\n  }))\n","import enTranslation from './en'\nimport { Resource } from 'i18next'\n\nconst resources: Resource = {\n  en: { translation: enTranslation },\n}\n\nexport default resources\n","import strings from '../strings'\n\nexport default {\n  [strings.MODULE_NAME]: 'Example',\n  [strings.DATA_LOADING]: 'Loading data from GraphQL...',\n  [strings.DATA_ERROR]: 'Error when loading data from GraphQL :(',\n}\n","import { createMuiTheme } from '@material-ui/core'\n\nexport const lightTheme = createMuiTheme({})\n\nexport const darkTheme = createMuiTheme({})\n","export default {\n  API_URL: process.env.REACT_APP_API_URL,\n}\n","import ApolloClient from 'apollo-boost'\nimport config from './env'\n\nconst client = new ApolloClient({\n  uri: config.API_URL,\n})\n\nexport default client\n","import React from 'react'\n\ninterface NotFoundMessageProps {}\n\nconst NotFoundMessage: React.FC<NotFoundMessageProps> = () => (\n  <h3>\n    Page not found <span role=\"img\" aria-label=\"ðŸ˜¢\" />\n  </h3>\n)\n\nexport default NotFoundMessage\n","import { getTranslationKeys } from 'utils'\n\nexport const MODULE_NAME = 'common'\n\nexport const STRINGS = {\n  LOGIN: 'LOGIN',\n}\n\nexport default getTranslationKeys(MODULE_NAME, STRINGS)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { AppBar, Toolbar, Grid, Button, Typography } from '@material-ui/core'\nimport { useTranslation } from 'react-i18next'\nimport strings from 'strings'\n\nexport interface NavItem {\n  label: string\n  path: string\n}\n\ninterface LayoutProps {\n  items: NavItem[]\n}\n\nconst Layout: React.FC<LayoutProps> = ({ items, children }) => {\n  const { t } = useTranslation()\n  return (\n    <>\n      <AppBar>\n        <Toolbar>\n          <Grid container justify=\"space-between\">\n            <Grid item>\n              <Typography>Place for Logo</Typography>\n            </Grid>\n            <Grid item>\n              {items.map(({ label, path }) => (\n                <Button to={path} component={Link}>\n                  {t(label)}\n                </Button>\n              ))}\n            </Grid>\n            <Grid item>\n              <Button>EN</Button>\n              <Button>{t(strings.LOGIN)}</Button>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n      {children}\n    </>\n  )\n}\n\nexport default Layout\n","import React, { useState } from 'react'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ThemeProvider } from '@material-ui/core'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport { client, lightTheme, darkTheme } from 'config'\nimport { Module } from 'types'\nimport NotFoundMessage from '../NotFoundMessage'\nimport { getRoutes, getNavItems } from './App.utils'\nimport Layout from 'components/Layout'\n\ninterface AppProps {\n  modules: Module[]\n}\n\nconst App: React.FC<AppProps> = ({ modules }) => {\n  const [isDarkTheme] = useState(true)\n  const theme = isDarkTheme ? darkTheme : lightTheme\n  const routes = getRoutes(modules)\n  const navItems = getNavItems(modules)\n  return (\n    <ApolloProvider client={client}>\n      <ThemeProvider theme={theme}>\n        <Router>\n          <Layout items={navItems}>\n            <Switch>\n              {routes.map((route) => (\n                // @ts-ignore\n                <Route key={route.path} {...route} />\n              ))}\n              <Route component={NotFoundMessage} />\n            </Switch>\n          </Layout>\n        </Router>\n      </ThemeProvider>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","import { Module } from 'types'\nimport { RouteProps } from 'react-router'\nimport { NavItem } from 'components/Layout'\n\nexport const getRoutes = (modules: Module[]) =>\n  modules.reduce<RouteProps[]>(\n    (routes, moduleConfig) => [...routes, ...moduleConfig.routes],\n    []\n  )\n\nexport const getNavItems = (modules: Module[]) =>\n  modules.reduce<NavItem[]>(\n    (navItems, moduleConfig) => [\n      ...navItems,\n      { label: moduleConfig.label, path: moduleConfig.path },\n    ],\n    []\n  )\n","import React from 'react'\n\ninterface LoaderProps {\n  error: Error\n}\n\nconst Loader: React.FC<LoaderProps> = ({ error }) =>\n  error ? <h3>Oh nooess!</h3> : <h3>Loading...</h3>\n\nexport default Loader\n","import { Module } from 'types'\nimport example from './example'\n\nconst modules: Module[] = [\n  // Append modules here\n  example,\n]\n\nexport default modules\n","import { Module } from 'types'\nimport strings, { MODULE_NAME } from './strings'\nimport i18n from './i18n'\nimport routes, { MODULE_BASE_PATH } from './routes'\n\nconst moduleConfig: Module = {\n  i18n,\n  routes,\n  name: MODULE_NAME,\n  path: MODULE_BASE_PATH,\n  label: strings.MODULE_NAME,\n}\n\nexport default moduleConfig\n","import { addBasePath } from 'utils'\nimport Loadable from 'react-loadable'\nimport { Loader } from 'components'\n\nexport const MODULE_BASE_PATH = '/example'\n\nexport default addBasePath(MODULE_BASE_PATH, [\n  {\n    path: '/',\n    exact: true,\n    component: Loadable({\n      loader: () => import('./containers/Test'),\n      loading: Loader,\n    }),\n  },\n])\n","import i18n, { Resource } from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport merge from 'deepmerge'\nimport modules from 'modules'\nimport enTranslation from './en'\n\nconst globalResources: Resource = {\n  en: { translation: enTranslation },\n}\n\nconst resources = modules.reduce<Resource>(\n  (translations, { i18n }) => merge(translations, i18n),\n  globalResources\n)\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: 'en',\n  fallbackLng: 'en',\n  interpolation: {\n    escapeValue: false,\n  },\n})\n\nexport default i18n\n","import strings from 'strings'\n\nexport default {\n  [strings.LOGIN]: 'Login',\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'i18n'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from 'components'\nimport modules from 'modules'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App modules={modules} />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}