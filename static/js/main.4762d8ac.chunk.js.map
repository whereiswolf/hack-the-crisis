{"version":3,"sources":["modules/home/i18n/index.ts","modules/home/i18n/en.ts","config/colors.ts","config/palette.ts","config/theme.ts","config/env.ts","config/client.ts","strings.ts","components/App/Layout/Layout.style.ts","components/App/Layout/Layout.tsx","components/App/NotFoundMessage/NotFoundMessage.tsx","components/App/App.style.ts","components/App/App.tsx","components/App/App.utils.ts","components/Loader/Loader.tsx","modules/home/index.ts","modules/home/routes.ts","modules/best-deals/index.ts","modules/best-deals/i18n/index.ts","modules/best-deals/i18n/en.ts","modules/best-deals/routes.ts","modules/vouchers/index.ts","modules/vouchers/i18n/index.ts","modules/vouchers/i18n/en.ts","modules/vouchers/routes.ts","modules/businesses/index.ts","modules/businesses/i18n/index.ts","modules/businesses/i18n/en.ts","modules/businesses/routes.ts","modules/about-us/index.ts","modules/about-us/i18n/index.ts","modules/about-us/i18n/en.ts","modules/about-us/routes.ts","modules/index.ts","modules/contact/index.ts","modules/contact/i18n/index.ts","modules/contact/i18n/en.ts","modules/contact/routes.ts","i18n/index.ts","i18n/en.ts","serviceWorker.ts","index.tsx","modules/home/strings.ts","modules/best-deals/strings.ts","modules/vouchers/strings.ts","modules/businesses/strings.ts","modules/about-us/strings.ts","modules/contact/strings.ts","utils/index.ts"],"names":["resources","en","translation","strings","MODULE_NAME","DATA_LOADING","DATA_ERROR","100","80","70","60","50","20","90","dark","primary","light","colors","main","contrastText","secondary","warning","text","theme","typography","useNextVariants","fontFamily","join","lightTheme","createMuiTheme","palette","darkTheme","API_URL","process","REACT_APP_API_URL","client","ApolloClient","uri","config","getTranslationKeys","LOGIN","Content","styled","div","Layout","items","children","useTranslation","t","i18n","AppBar","Toolbar","Grid","container","justify","item","Typography","map","label","path","Button","key","to","component","Link","language","NotFoundMessage","role","aria-label","GlobalStyle","createGlobalStyle","App","modules","useState","routes","reduce","moduleConfig","getRoutes","navItems","getNavItems","ThemeProvider","route","Loader","error","addBasePath","exact","Loadable","loader","loading","name","home","bestDeals","vouchers","businesses","aboutUs","globalResources","translations","merge","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","moduleName","Object","entries","obj","value","basePath"],"mappings":"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","file":"static/js/main.4762d8ac.chunk.js","sourcesContent":["import enTranslation from './en'\nimport { Resource } from 'i18next'\n\nconst resources: Resource = {\n  en: { translation: enTranslation },\n}\n\nexport default resources\n","import strings from '../strings'\n\nexport default {\n  [strings.MODULE_NAME]: 'Home',\n  [strings.DATA_LOADING]: 'Loading data from GraphQL...',\n  [strings.DATA_ERROR]: 'Error when loading data from GraphQL :(',\n}\n","export default {\n  primary: {\n    100: '#101010',\n    80: '#1B1B1B',\n    70: '#282828',\n    60: '#2A2A2C',\n    50: '#3B3D46',\n    20: '#7F7F7F',\n  },\n  secondary: {\n    100: '#00C067',\n    50: '#27C9B0',\n  },\n  accent: {\n    100: '#FE3F59',\n  },\n  white: '#fff',\n  black: '#000',\n  text: {\n    100: '#F6F6F6',\n    50: '#BDBDBD',\n  },\n  light: {\n    100: '#F2F2F2',\n    90: '#F5F4F4',\n  },\n  yellow: '#EAA718'\n};","import colors from './colors';  \n\nexport const dark = {\n  primary: {\n    light: colors.primary[70],\n    main: colors.primary[80],\n    dark: colors.primary[100],\n    contrastText: colors.white,\n  },\n  secondary: {\n    light: colors.secondary[50],\n    main: colors.secondary[100],\n    contrastText: colors.white,\n  },\n  warning: {\n    main: colors.accent[100],\n  },\n  text: {\n    primary: colors.text[100],\n    secondary: colors.text[50],\n  },\n}\n\nexport const light = {\n  primary: {\n    light: colors.light[90],\n    main: colors.light[100],\n    contrastText: colors.primary[50],\n  },\n  secondary: {\n    light: colors.secondary[50],\n    main: colors.secondary[100],\n    contrastText: colors.white,\n  },\n  warning: {\n    main: colors.accent[100],\n  },\n  text: {\n    primary: colors.primary[50],\n    secondary: colors.primary[20],\n  },\n}\n\nexport default {\n  dark,\n  light,\n};","import { createMuiTheme } from '@material-ui/core/styles';\nimport { dark, light } from './palette';\n\nconst theme = {\n  typography: {\n    useNextVariants: true,\n    fontFamily: [\n      'Muli',\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n}\n\nexport const lightTheme = createMuiTheme({\n  ...theme,\n  palette: light,\n})\n\nexport const darkTheme = createMuiTheme({\n  ...theme,\n  palette: dark,\n})\n","export default {\n  API_URL: process.env.REACT_APP_API_URL,\n}\n","import ApolloClient from 'apollo-boost'\nimport config from './env'\n\nconst client = new ApolloClient({\n  uri: config.API_URL,\n})\n\nexport default client\n","import { getTranslationKeys } from 'utils'\n\nexport const MODULE_NAME = 'common'\n\nexport const STRINGS = {\n  LOGIN: 'LOGIN',\n}\n\nexport default getTranslationKeys(MODULE_NAME, STRINGS)\n","import styled from 'styled-components'\n\nexport const Content = styled.div`\n  padding-top: 64px;\n`\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { AppBar, Grid, Button, Typography, Toolbar } from '@material-ui/core'\nimport { useTranslation } from 'react-i18next'\nimport strings from 'strings'\nimport { Content } from './Layout.style'\n\nexport interface NavItem {\n  label: string\n  path: string\n}\n\ninterface LayoutProps {\n  items: NavItem[]\n}\n\nconst Layout: React.FC<LayoutProps> = ({ items, children }) => {\n  const { t, i18n } = useTranslation()\n  return (\n    <>\n      <AppBar>\n        <Toolbar>\n          <Grid container justify=\"space-between\">\n            <Grid item>\n              <Typography>Place for Logo</Typography>\n            </Grid>\n            <Grid item>\n              {items.map(({ label, path }) => (\n                <Button key={path} to={path} component={Link}>\n                  {t(label)}\n                </Button>\n              ))}\n            </Grid>\n            <Grid item>\n              <Button>{i18n.language}</Button>\n              <Button>{t(strings.LOGIN)}</Button>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n      <Content>{children}</Content>\n    </>\n  )\n}\n\nexport default Layout\n","import React from 'react'\n\ninterface NotFoundMessageProps {}\n\nconst NotFoundMessage: React.FC<NotFoundMessageProps> = () => (\n  <h3>\n    Page not found <span role=\"img\" aria-label=\"😢\" />\n  </h3>\n)\n\nexport default NotFoundMessage\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    height: 100vh;\n    margin: 0;\n    padding: 0;\n  }\n`\n","import React, { useState } from 'react'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ThemeProvider } from '@material-ui/core'\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport { client, lightTheme, darkTheme } from 'config'\nimport { Module } from 'types'\nimport Layout from './Layout'\nimport NotFoundMessage from './NotFoundMessage'\nimport { getRoutes, getNavItems } from './App.utils'\nimport { GlobalStyle } from './App.style'\n\ninterface AppProps {\n  modules: Module[]\n}\n\nconst App: React.FC<AppProps> = ({ modules }) => {\n  const [isDarkTheme] = useState(true)\n  const theme = isDarkTheme ? darkTheme : lightTheme\n  const routes = getRoutes(modules)\n  const navItems = getNavItems(modules)\n  return (\n    <ApolloProvider client={client}>\n      <ThemeProvider theme={theme}>\n        <StyledThemeProvider theme={theme}>\n          <GlobalStyle />\n          <Router>\n            <Layout items={navItems}>\n              <Switch>\n                {routes.map((route) => (\n                  // @ts-ignore\n                  <Route key={route.path} {...route} />\n                ))}\n                <Route component={NotFoundMessage} />\n              </Switch>\n            </Layout>\n          </Router>\n        </StyledThemeProvider>\n      </ThemeProvider>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","import { Module } from 'types'\nimport { RouteProps } from 'react-router'\nimport { NavItem } from './Layout'\n\nexport const getRoutes = (modules: Module[]) =>\n  modules.reduce<RouteProps[]>(\n    (routes, moduleConfig) => [...routes, ...moduleConfig.routes],\n    []\n  )\n\nexport const getNavItems = (modules: Module[]) =>\n  modules.reduce<NavItem[]>(\n    (navItems, moduleConfig) => [\n      ...navItems,\n      { label: moduleConfig.label, path: moduleConfig.path },\n    ],\n    []\n  )\n","import React from 'react'\n\ninterface LoaderProps {\n  error: Error\n}\n\nconst Loader: React.FC<LoaderProps> = ({ error }) =>\n  error ? <h3>Oh nooess!</h3> : <h3>Loading...</h3>\n\nexport default Loader\n","import { Module } from 'types'\nimport strings, { MODULE_NAME } from './strings'\nimport i18n from './i18n'\nimport routes, { MODULE_BASE_PATH } from './routes'\n\nconst moduleConfig: Module = {\n  i18n,\n  routes,\n  name: MODULE_NAME,\n  path: MODULE_BASE_PATH,\n  label: strings.MODULE_NAME,\n}\n\nexport default moduleConfig\n","import { addBasePath } from 'utils'\nimport Loadable from 'react-loadable'\nimport { Loader } from 'components'\n\nexport const MODULE_BASE_PATH = ''\n\nexport default addBasePath(MODULE_BASE_PATH, [\n  {\n    path: '/',\n    exact: true,\n    component: Loadable({\n      loader: () => import('./containers/Test'),\n      loading: Loader,\n    }),\n  },\n])\n","import { Module } from 'types'\nimport strings, { MODULE_NAME } from './strings'\nimport i18n from './i18n'\nimport routes, { MODULE_BASE_PATH } from './routes'\n\nconst moduleConfig: Module = {\n  i18n,\n  routes,\n  name: MODULE_NAME,\n  path: MODULE_BASE_PATH,\n  label: strings.MODULE_NAME,\n}\n\nexport default moduleConfig\n","import enTranslation from './en'\nimport { Resource } from 'i18next'\n\nconst resources: Resource = {\n  en: { translation: enTranslation },\n}\n\nexport default resources\n","import strings from '../strings'\n\nexport default {\n  [strings.MODULE_NAME]: 'Best deals',\n  [strings.DATA_LOADING]: 'Loading data from GraphQL...',\n  [strings.DATA_ERROR]: 'Error when loading data from GraphQL :(',\n}\n","import { addBasePath } from 'utils'\nimport Loadable from 'react-loadable'\nimport { Loader } from 'components'\n\nexport const MODULE_BASE_PATH = '/best-deals'\n\nexport default addBasePath(MODULE_BASE_PATH, [\n  {\n    path: '/',\n    exact: true,\n    component: Loadable({\n      loader: () => import('./containers/Test'),\n      loading: Loader,\n    }),\n  },\n])\n","import { Module } from 'types'\nimport strings, { MODULE_NAME } from './strings'\nimport i18n from './i18n'\nimport routes, { MODULE_BASE_PATH } from './routes'\n\nconst moduleConfig: Module = {\n  i18n,\n  routes,\n  name: MODULE_NAME,\n  path: MODULE_BASE_PATH,\n  label: strings.MODULE_NAME,\n}\n\nexport default moduleConfig\n","import enTranslation from './en'\nimport { Resource } from 'i18next'\n\nconst resources: Resource = {\n  en: { translation: enTranslation },\n}\n\nexport default resources\n","import strings from '../strings'\n\nexport default {\n  [strings.MODULE_NAME]: 'Vouchers',\n  [strings.DATA_LOADING]: 'Loading data from GraphQL...',\n  [strings.DATA_ERROR]: 'Error when loading data from GraphQL :(',\n}\n","import { addBasePath } from 'utils'\nimport Loadable from 'react-loadable'\nimport { Loader } from 'components'\n\nexport const MODULE_BASE_PATH = '/vouchers'\n\nexport default addBasePath(MODULE_BASE_PATH, [\n  {\n    path: '/',\n    exact: true,\n    component: Loadable({\n      loader: () => import('./containers/Test'),\n      loading: Loader,\n    }),\n  },\n])\n","import { Module } from 'types'\nimport strings, { MODULE_NAME } from './strings'\nimport i18n from './i18n'\nimport routes, { MODULE_BASE_PATH } from './routes'\n\nconst moduleConfig: Module = {\n  i18n,\n  routes,\n  name: MODULE_NAME,\n  path: MODULE_BASE_PATH,\n  label: strings.MODULE_NAME,\n}\n\nexport default moduleConfig\n","import enTranslation from './en'\nimport { Resource } from 'i18next'\n\nconst resources: Resource = {\n  en: { translation: enTranslation },\n}\n\nexport default resources\n","import strings from '../strings'\n\nexport default {\n  [strings.MODULE_NAME]: 'Businesses',\n  [strings.DATA_LOADING]: 'Loading data from GraphQL...',\n  [strings.DATA_ERROR]: 'Error when loading data from GraphQL :(',\n}\n","import { addBasePath } from 'utils'\nimport Loadable from 'react-loadable'\nimport { Loader } from 'components'\n\nexport const MODULE_BASE_PATH = '/businesses'\n\nexport default addBasePath(MODULE_BASE_PATH, [\n  {\n    path: '/',\n    exact: true,\n    component: Loadable({\n      loader: () => import('./containers/Test'),\n      loading: Loader,\n    }),\n  },\n])\n","import { Module } from 'types'\nimport strings, { MODULE_NAME } from './strings'\nimport i18n from './i18n'\nimport routes, { MODULE_BASE_PATH } from './routes'\n\nconst moduleConfig: Module = {\n  i18n,\n  routes,\n  name: MODULE_NAME,\n  path: MODULE_BASE_PATH,\n  label: strings.MODULE_NAME,\n}\n\nexport default moduleConfig\n","import enTranslation from './en'\nimport { Resource } from 'i18next'\n\nconst resources: Resource = {\n  en: { translation: enTranslation },\n}\n\nexport default resources\n","import strings from '../strings'\n\nexport default {\n  [strings.MODULE_NAME]: 'About us',\n  [strings.DATA_LOADING]: 'Loading data from GraphQL...',\n  [strings.DATA_ERROR]: 'Error when loading data from GraphQL :(',\n}\n","import { addBasePath } from 'utils'\nimport Loadable from 'react-loadable'\nimport { Loader } from 'components'\n\nexport const MODULE_BASE_PATH = '/about-us'\n\nexport default addBasePath(MODULE_BASE_PATH, [\n  {\n    path: '/',\n    exact: true,\n    component: Loadable({\n      loader: () => import('./containers/Test'),\n      loading: Loader,\n    }),\n  },\n])\n","import { Module } from 'types'\nimport home from './home'\nimport bestDeals from './best-deals'\nimport vouchers from './vouchers'\nimport businesses from './businesses'\nimport aboutUs from './about-us'\nimport contact from './contact'\n\nconst modules: Module[] = [\n  // Append modules here\n  home,\n  bestDeals,\n  vouchers,\n  businesses,\n  aboutUs,\n  contact,\n]\n\nexport default modules\n","import { Module } from 'types'\nimport strings, { MODULE_NAME } from './strings'\nimport i18n from './i18n'\nimport routes, { MODULE_BASE_PATH } from './routes'\n\nconst moduleConfig: Module = {\n  i18n,\n  routes,\n  name: MODULE_NAME,\n  path: MODULE_BASE_PATH,\n  label: strings.MODULE_NAME,\n}\n\nexport default moduleConfig\n","import enTranslation from './en'\nimport { Resource } from 'i18next'\n\nconst resources: Resource = {\n  en: { translation: enTranslation },\n}\n\nexport default resources\n","import strings from '../strings'\n\nexport default {\n  [strings.MODULE_NAME]: 'Contact',\n  [strings.DATA_LOADING]: 'Loading data from GraphQL...',\n  [strings.DATA_ERROR]: 'Error when loading data from GraphQL :(',\n}\n","import { addBasePath } from 'utils'\nimport Loadable from 'react-loadable'\nimport { Loader } from 'components'\n\nexport const MODULE_BASE_PATH = '/contact'\n\nexport default addBasePath(MODULE_BASE_PATH, [\n  {\n    path: '/',\n    exact: true,\n    component: Loadable({\n      loader: () => import('./containers/Test'),\n      loading: Loader,\n    }),\n  },\n])\n","import i18n, { Resource } from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport merge from 'deepmerge'\nimport modules from 'modules'\nimport enTranslation from './en'\n\nconst globalResources: Resource = {\n  en: { translation: enTranslation },\n}\n\nconst resources = modules.reduce<Resource>(\n  (translations, { i18n }) => merge(translations, i18n),\n  globalResources\n)\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: 'en',\n  fallbackLng: 'en',\n  interpolation: {\n    escapeValue: false,\n  },\n})\n\nexport default i18n\n","import strings from 'strings'\n\nexport default {\n  [strings.LOGIN]: 'Login',\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'i18n'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from 'components'\nimport modules from 'modules'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App modules={modules} />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { getTranslationKeys } from 'utils'\n\nexport const MODULE_NAME = 'home'\n\nexport const STRINGS = {\n  MODULE_NAME: 'MODULE_NAME',\n  DATA_LOADING: 'DATA_LOADING',\n  DATA_ERROR: 'DATA_ERROR',\n}\n\nexport default getTranslationKeys(MODULE_NAME, STRINGS)\n","import { getTranslationKeys } from 'utils'\n\nexport const MODULE_NAME = 'best-deals'\n\nexport const STRINGS = {\n  MODULE_NAME: 'MODULE_NAME',\n  DATA_LOADING: 'DATA_LOADING',\n  DATA_ERROR: 'DATA_ERROR',\n}\n\nexport default getTranslationKeys(MODULE_NAME, STRINGS)\n","import { getTranslationKeys } from 'utils'\n\nexport const MODULE_NAME = 'vouchers'\n\nexport const STRINGS = {\n  MODULE_NAME: 'MODULE_NAME',\n  DATA_LOADING: 'DATA_LOADING',\n  DATA_ERROR: 'DATA_ERROR',\n}\n\nexport default getTranslationKeys(MODULE_NAME, STRINGS)\n","import { getTranslationKeys } from 'utils'\n\nexport const MODULE_NAME = 'businesses'\n\nexport const STRINGS = {\n  MODULE_NAME: 'MODULE_NAME',\n  DATA_LOADING: 'DATA_LOADING',\n  DATA_ERROR: 'DATA_ERROR',\n}\n\nexport default getTranslationKeys(MODULE_NAME, STRINGS)\n","import { getTranslationKeys } from 'utils'\n\nexport const MODULE_NAME = 'about-us'\n\nexport const STRINGS = {\n  MODULE_NAME: 'MODULE_NAME',\n  DATA_LOADING: 'DATA_LOADING',\n  DATA_ERROR: 'DATA_ERROR',\n}\n\nexport default getTranslationKeys(MODULE_NAME, STRINGS)\n","import { getTranslationKeys } from 'utils'\n\nexport const MODULE_NAME = 'contact'\n\nexport const STRINGS = {\n  MODULE_NAME: 'MODULE_NAME',\n  DATA_LOADING: 'DATA_LOADING',\n  DATA_ERROR: 'DATA_ERROR',\n}\n\nexport default getTranslationKeys(MODULE_NAME, STRINGS)\n","import { RouteProps } from 'react-router'\n\nexport const getTranslationKeys = <T>(moduleName: string, strings: T) =>\n  Object.entries(strings).reduce<T>(\n    (obj, [key, value]) => ({ ...obj, [key]: `${moduleName}_${value}` }),\n    {} as T\n  )\n\nexport const addBasePath = (basePath: string, routes: RouteProps[]) =>\n  routes.map((route) => ({\n    ...route,\n    path: `${basePath}${route.path}`,\n  }))\n"],"sourceRoot":""}