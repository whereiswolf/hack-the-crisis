{"version":3,"sources":["modules/businesses/containers/BusinessList/BusinessList.utils.ts","modules/businesses/containers/BusinessList/BusinessList.style.ts","modules/businesses/containers/BusinessList/Filtering/MapSwitch/MapSwitch.tsx","modules/businesses/containers/BusinessList/Filtering/Description/Description.style.ts","modules/businesses/containers/BusinessList/Filtering/Description/Description.tsx","modules/businesses/containers/BusinessList/Filtering/FiltersPanel/FiltersPanel.utils.ts","modules/businesses/containers/BusinessList/Filtering/SupportLevelPanel/SupportLevelPanel.tsx","modules/businesses/containers/BusinessList/Filtering/FiltersPanel/FiltersPanel.tsx","modules/businesses/containers/BusinessList/Filtering/Filtering.style.ts","modules/businesses/containers/BusinessList/Filtering/Filtering.tsx","modules/businesses/containers/BusinessList/BusinessMap/BusinessMap.tsx","modules/businesses/containers/BusinessList/BusinessList.tsx"],"names":["queries","BUSINESSES","gql","CardListWrapper","styled","div","types","value","label","MapSwitch","listType","onChange","t","useTranslation","Grid","container","spacing","map","item","key","Button","variant","color","onClick","Title","Typography","p","theme","palette","secondary","main","Description","CATEGORIES","emptyValue","title","BusinessType","Local","Online","SupportLevelPanel","level","FiltersPanel","onFind","categories","data","useQuery","id","name","useCategories","useState","category","setCategory","type","setType","setName","supportLevel","setSupportLevel","direction","md","placeholder","options","justify","fullWidth","Wrapper","Filtering","onListTypeChange","filters","DEFAULT_CENTER","lat","lng","BusinessMap","props","defaultCenter","usePosition","latitude","longitude","undefined","useDefaultCenter","bootstrapURLKeys","config","MAPS_KEY","center","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","panTo","handleApiLoaded","styles","defaultFilters","BusinessList","variables","businesses","refetch","defaultType","localStorage","getItem","setListType","history","useHistory","style","height","setItem","items","push"],"mappings":"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","file":"static/js/6.e5bd5e54.chunk.js","sourcesContent":["import { gql } from 'apollo-boost'\n\nconst BUSINESSES = gql`\n  query {\n    businesses {\n      id\n      name\n      imageUrl\n    }\n  }\n`\n\nexport const queries = {\n  BUSINESSES,\n}\n","import styled from 'styled-components'\n\nexport const CardListWrapper = styled.div`\n  padding: 80px 64px 80px 0px;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n`\n","import React from 'react'\nimport { Grid, Button } from '@material-ui/core'\nimport { useTranslation } from 'react-i18next'\nimport { ListType } from 'types'\n\ninterface MapSwitchProps {\n  onChange: (type: ListType) => any\n  listType: ListType\n}\n\nconst types: { value: ListType; label: string }[] = [\n  {\n    value: 'list',\n    label: 'List',\n  },\n  {\n    value: 'map',\n    label: 'Business map',\n  },\n]\n\nconst MapSwitch: React.FC<MapSwitchProps> = ({ listType, onChange }) => {\n  const { t } = useTranslation()\n  return (\n    <Grid container spacing={2}>\n      {types.map(({ value, label }) => (\n        <Grid item key={label}>\n          <Button\n            variant=\"contained\"\n            color={listType === value ? 'secondary' : 'primary'}\n            onClick={() => onChange(value)}\n          >\n            {t(label)}\n          </Button>\n        </Grid>\n      ))}\n    </Grid>\n  )\n}\n\nexport default MapSwitch\n","import styled from 'styled-components'\nimport { Typography } from '@material-ui/core'\n\nexport const Title = styled(Typography)`\n  em {\n    font-style: normal;\n    color: ${(p) => p.theme.palette.secondary.main};\n  }\n`\n","import React from 'react'\nimport { Typography } from '@material-ui/core'\nimport { Title } from './Description.style'\n\ninterface DescriptionProps {}\n\nconst Description = () => (\n  <>\n    <Title color=\"textPrimary\" variant=\"h2\">\n      Businesses in need of <em>support</em>\n    </Title>\n    <br />\n    <Typography color=\"textSecondary\" variant=\"body1\">\n      Ad ad minim est mollit deserunt duis qui reprehenderit minim laborum sit.\n      Ipsum mollit est quis non ex ad sit. Lorem mollit exercitation dolore\n      velit velit ad ut sint irure ut excepteur ad. Qui quis nostrud ad labore.\n      Adipisicing ex enim irure labore magna anim laboris amet proident quis\n      sint aute. Cillum id ex cupidatat id.\n    </Typography>\n  </>\n)\n\nexport default Description\n","import { useQuery } from '@apollo/react-hooks'\nimport { gql } from 'apollo-boost'\nimport { Category } from 'types'\nimport BusinessType from 'enums/BusinessType'\n\nconst CATEGORIES = gql`\n  query {\n    categories {\n      id\n      name\n    }\n  }\n`\n\nexport const queries = { CATEGORIES }\n\nconst emptyValue = { title: '-', value: '' }\n\nexport const useCategories = () => {\n  const { data } = useQuery<{ categories: Category[] }>(queries.CATEGORIES)\n  if (!data) return []\n  return [\n    emptyValue,\n    ...data.categories.map(({ id, name }) => ({\n      title: name,\n      value: id,\n    })),\n  ]\n}\n\nexport const types = [\n  {\n    value: '',\n    title: 'All',\n  },\n  {\n    value: BusinessType.Local,\n    title: 'Local',\n  },\n  {\n    value: BusinessType.Online,\n    title: 'Online',\n  },\n]\n","import React from 'react'\nimport { Grid, Button } from '@material-ui/core'\n\ninterface SupportLevelPanelProps {\n  level: number | null\n  onChange: (level: number) => any\n}\n\nconst types = [\n  {\n    value: 0,\n    label: 'Unsupported',\n  },\n  {\n    value: 1,\n    label: '5-40%',\n  },\n  {\n    value: 2,\n    label: '40-75%',\n  },\n  {\n    value: 3,\n    label: 'Over 75%',\n  },\n]\n\nconst SupportLevelPanel: React.FC<SupportLevelPanelProps> = ({\n  level,\n  onChange,\n}) => (\n  <Grid container spacing={2}>\n    {types.map(({ value, label }) => (\n      <Grid item key={label}>\n        <Button\n          variant=\"contained\"\n          onClick={() => onChange(value)}\n          color={level === value ? 'secondary' : 'primary'}\n        >\n          {label}\n        </Button>\n      </Grid>\n    ))}\n  </Grid>\n)\n\nexport default SupportLevelPanel\n","import React, { useState } from 'react'\nimport { Grid, Typography } from '@material-ui/core'\nimport { Select, TextInput, Button } from 'components'\nimport { useCategories, types } from './FiltersPanel.utils'\nimport SupportLevelPanel from '../SupportLevelPanel'\n\ninterface Filters {\n  category: string | null\n  type: string | null\n  name: string | null\n  supportLevel: number | null\n}\n\ninterface FiltersPanelProps {\n  onFind: (filters: Filters) => any\n}\n\nconst FiltersPanel: React.FC<FiltersPanelProps> = ({ onFind }) => {\n  const categories = useCategories()\n  const [category, setCategory] = useState<string>('')\n  const [type, setType] = useState<string>('')\n  const [name, setName] = useState<string>('')\n  const [supportLevel, setSupportLevel] = useState<number>(0)\n\n  const find = (): Filters => onFind({ category, type, name, supportLevel })\n\n  return (\n    <Grid container direction=\"column\" spacing={2}>\n      <Grid item>\n        <Typography color=\"textPrimary\" variant=\"h5\">\n          Let us help you\n        </Typography>\n      </Grid>\n      <Grid item container spacing={2}>\n        <Grid item md={6}>\n          <Select\n            name=\"category\"\n            placeholder=\"Business Category\"\n            options={categories}\n            onChange={setCategory as (c: string | number) => any}\n          />\n        </Grid>\n        <Grid item md={6}>\n          <Select\n            name=\"type\"\n            placeholder=\"Type of service\"\n            options={types}\n            onChange={setType as (d: string | number) => any}\n          />\n        </Grid>\n        <Grid item md={9}>\n          <TextInput\n            name=\"name\"\n            placeholder=\"Find business by name\"\n            value={name}\n            onChange={setName as (l: React.ReactText) => any}\n          />\n        </Grid>\n        <Grid item container md={3} justify=\"flex-end\">\n          <Button fullWidth onClick={find}>\n            Find\n          </Button>\n        </Grid>\n        <Grid item container direction=\"column\">\n          <br />\n          <Typography variant=\"h6\" color=\"textPrimary\">\n            Find by support level\n          </Typography>\n          <br />\n          <SupportLevelPanel level={supportLevel} onChange={setSupportLevel} />\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default FiltersPanel\n","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n  padding: 64px;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n`\n","import React from 'react'\nimport { Grid } from '@material-ui/core'\nimport MapSwitch from './MapSwitch'\nimport Description from './Description'\nimport FiltersPanel from './FiltersPanel'\nimport { Wrapper } from './Filtering.style'\nimport { ListType } from 'types'\n\nexport interface Filters {\n  type: string | null\n  category: string | null\n  name: string | null\n}\n\ninterface FilteringProps {\n  onFind: (filters: Filters) => any\n  onListTypeChange: (type: ListType) => any\n  listType: ListType\n}\n\nconst Filtering: React.FC<FilteringProps> = ({\n  onFind,\n  onListTypeChange,\n  listType,\n}) => {\n  const find = (filters: Filters) => onFind(filters)\n\n  return (\n    <Wrapper>\n      <Grid container direction=\"column\" justify=\"center\" spacing={10}>\n        <Grid item container direction=\"column\" justify=\"center\" spacing={2}>\n          <Grid item>\n            <MapSwitch listType={listType} onChange={onListTypeChange} />\n          </Grid>\n          <Grid item>\n            <Description />\n          </Grid>\n        </Grid>\n        <Grid item>\n          <FiltersPanel onFind={find} />\n        </Grid>\n      </Grid>\n    </Wrapper>\n  )\n}\n\nexport default Filtering\n","import React from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport config from 'config'\nimport { usePosition } from 'use-position'\nimport styles from './styles.json'\n\ninterface Props {}\n\nconst DEFAULT_CENTER = {\n  lat: 59.332652,\n  lng: 18.069259,\n}\nconst DEFAULT_ZOOM = 14\n\nconst useDefaultCenter = () => {\n  const { latitude: lat, longitude: lng } = usePosition(false)\n  return lat === undefined || lng === undefined ? DEFAULT_CENTER : { lat, lng }\n}\n\nconst BusinessMap = (props: Props) => {\n  const defaultCenter = useDefaultCenter()\n  const handleApiLoaded = (map: any) => map.panTo(defaultCenter)\n\n  return (\n    <GoogleMapReact\n      bootstrapURLKeys={{ key: config.MAPS_KEY }}\n      defaultCenter={defaultCenter}\n      center={defaultCenter}\n      defaultZoom={DEFAULT_ZOOM}\n      yesIWantToUseGoogleMapApiInternals\n      onGoogleApiLoaded={({ map }) => handleApiLoaded(map)}\n      options={{ styles }}\n    >\n      {/* <AnyReactComponent\n          lat={59.955413}\n          lng={30.337844}\n          text=\"My Marker\"\n        /> */}\n    </GoogleMapReact>\n  )\n}\n\nexport default BusinessMap\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { Grid } from '@material-ui/core'\nimport { CardList } from 'components'\nimport { useHistory } from 'react-router'\nimport { queries } from './BusinessList.utils'\nimport { CardListWrapper } from './BusinessList.style'\nimport Filtering, { Filters } from './Filtering'\nimport { ListType } from 'types'\nimport BusinessMap from './BusinessMap'\n\ninterface BusinessListProps {}\n\nconst defaultFilters: Filters = {\n  category: null,\n  type: null,\n  name: null,\n}\n\nconst BusinessList: React.FC<BusinessListProps> = () => {\n  const { data = { businesses: [] }, refetch } = useQuery(queries.BUSINESSES, {\n    variables: defaultFilters,\n  })\n  const { businesses } = data\n  const defaultType = (localStorage.getItem('listType') as ListType) || 'list'\n  const [listType, setListType] = useState<ListType>(defaultType)\n  const history = useHistory()\n  const handleListTypeChange = (type: ListType) => {\n    setListType(type)\n    localStorage.setItem('listType', type)\n  }\n  return (\n    <Grid container style={{ height: '100%' }}>\n      <Grid item md={5}>\n        <Filtering\n          onFind={refetch}\n          onListTypeChange={handleListTypeChange}\n          listType={listType}\n        />\n      </Grid>\n      <Grid item md={7}>\n        {listType === 'list' ? (\n          <CardListWrapper>\n            <CardList\n              items={businesses}\n              onClick={({ id }) => history.push(`/businesses/${id}`)}\n            />\n          </CardListWrapper>\n        ) : (\n          <BusinessMap />\n        )}\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default BusinessList\n"],"sourceRoot":""}