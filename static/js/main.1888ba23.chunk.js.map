{"version":3,"sources":["components/App/App.tsx","components/Loader/Loader.tsx","modules/index.ts","modules/dogs/index.ts","modules/dogs/redux/index.ts","modules/dogs/routes.ts","serviceWorker.ts","index.tsx"],"names":["App","modules","routes","reducers","store","configureStore","reducer","map","route","key","path","Loader","error","component","Loadable","loader","loading","reduce","acc","moduleConfig","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wOAwBeA,EAdiB,SAAC,GAAuC,IAAD,IAApCC,QAAWC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,SAC9CC,EAAQC,YAAe,CAAEC,QAASH,IACxC,OACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,IAAD,KACGF,EAAOK,KAAI,SAACC,GAAD,OAEV,kBAAC,IAAD,eAAOC,IAAKD,EAAME,MAAUF,UCRvBG,EAHuB,SAAC,GAAD,SAAGC,MAC/B,0CAAsB,2C,wBCCjBX,EALW,CCCG,CAC3BE,SCLa,GDMbD,OEHa,CACb,CACEQ,KAAM,IACNG,U,MAAWC,GAAS,CAClBC,OAAQ,kBAAM,8BACdC,QAASL,QHAQM,QACrB,SAACC,EAAaC,GAAd,MAAgD,CAC9CjB,OAAO,GAAD,mBAAMgB,EAAIhB,QAAV,YAAqBiB,EAAajB,SACxCC,SAAS,eAAMe,EAAIf,SAAX,GAAwBgB,EAAahB,aAE/C,CACED,OAAQ,GACRC,SAAU,KIHMiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,CAAKzB,QAASA,IAAa0B,SAASC,eAAe,SDqI7D,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLwB,QAAQxB,MAAMA,EAAMyB,c","file":"static/js/main.1888ba23.chunk.js","sourcesContent":["import React from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { Module } from 'types'\nimport { configureStore } from '@reduxjs/toolkit'\n\ninterface AppProps {\n  modules: Module\n}\n\nconst App: React.FC<AppProps> = ({ modules: { routes, reducers } }) => {\n  const store = configureStore({ reducer: reducers })\n  return (\n    <Provider store={store}>\n      <Router>\n        {routes.map((route) => (\n          // @ts-ignore\n          <Route key={route.path} {...route} />\n        ))}\n      </Router>\n    </Provider>\n  )\n}\n\nexport default App\n","import React from 'react'\n\ninterface LoaderProps {\n  error: Error\n}\n\nconst Loader: React.FC<LoaderProps> = ({ error }) =>\n  error ? <h3>Oh nooess!</h3> : <h3>Loading...</h3>\n\nexport default Loader\n","import { Module } from 'types'\nimport dogs from './dogs'\n\nconst modules: Module[] = [\n  // Append modules here\n  dogs,\n]\n\nexport default modules.reduce(\n  (acc: Module, moduleConfig: Module): Module => ({\n    routes: [...acc.routes, ...moduleConfig.routes],\n    reducers: { ...acc.reducers, ...moduleConfig.reducers },\n  }),\n  {\n    routes: [],\n    reducers: {},\n  }\n)\n","import { Module } from 'types'\nimport routes from './routes'\nimport reducers from './redux'\n\nconst moduleConfig: Module = {\n  reducers,\n  routes,\n}\n\nexport default moduleConfig\n","export default {}\n","import Loadable from 'react-loadable'\nimport { Loader } from 'components'\n\nexport default [\n  {\n    path: '/',\n    component: Loadable({\n      loader: () => import('./containers/Test'),\n      loading: Loader,\n    }),\n  },\n]\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from 'components'\nimport modules from 'modules'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App modules={modules} />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}